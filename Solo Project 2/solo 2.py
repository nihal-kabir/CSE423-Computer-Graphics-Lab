# -*- coding: utf-8 -*-
"""423_Ass 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w-gMVUE7EQslE_ajksi2cwClgbag3Q3F
"""

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random

########################

W_Width = 500
W_Height = 500

start = True
pause = False
gameOn = True
exit_game = False

score = 0

r = 1
g = 1
b = 1

########################

### diamond
diamond_y = 250
diamond_x = 200
d_speed = 0.4

### catcher / bowl
bowl_x = -250
bowl_y = -220
b_speed = 20

################################################

def draw_points(x, y, s):
    glPointSize(s)  # 1 thake by default
    glBegin(GL_POINTS)
    glVertex2f(x, y)
    glEnd()


def drawLine(x0, y0, x1, y1):
    zone = findZone(x0, y0, x1, y1)
    x0, y0 = convert_n_to_0(zone, x0, y0)
    x1, y1 = convert_n_to_0(zone, x1, y1)

    dx = x1 - x0
    dy = y1 - y0
    d = 2 * dy - dx
    incrE = 2 * dy
    incrNE = 2 * (dy - dx)

    x, y = x0, y0

    originalZone(zone, x, y)

    while x < x1:
        if d <= 0:
            d += incrE
            x += 1
        else:
            d += incrNE
            x += 1
            y += 1

        originalZone(zone, x, y)

def originalZone(z, x, y):
    s = 2

    if z == 0:
        draw_points(x, y, s)
    elif z == 1:
        draw_points(y, x, s)
    elif z == 2:
        draw_points(-y, x, s)
    elif z == 3:
        draw_points(-x, y, s)
    elif z == 4:
        draw_points(-x, -y, s)
    elif z == 5:
        draw_points(-y, -x, s)
    elif z == 6:
        draw_points(y, -x, s)
    elif z == 7:
        draw_points(x, -y, s)


def findZone(x1, y1, x2, y2):
    dx = x2 - x1
    dy = y2 - y1
    if abs(dx) >= abs(dy):
        if dx >= 0 and dy >= 0:
            zone = 0
        elif dx < 0 and dy >= 0:
            zone = 3
        elif dx < 0 and dy < 0:
            zone = 4
        else:
            zone = 7
    else:
        if dx >= 0 and dy > 0:
            zone = 1
        elif dx < 0 and dy > 0:
            zone = 2
        elif dx <= 0 and dy < 0:
            zone = 5
        else:
            zone = 6
    return zone


def convert_n_to_0(zone, x, y):
    if zone == 0:
        return (x, y)
    else:
        if zone == 1:
            return (y, x)
        elif zone == 2:
            return (y, -x)
        elif zone == 3:
            return (-x, y)
        elif zone == 4:
            return (-x, -y)
        elif zone == 5:
            return (-y, -x)
        elif zone == 6:
            return (-y, x)
        else:
            return (x, -y)

################################################


click = 0


def display():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glClearColor(0, 0, 0, 0)  # //color black
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    glMatrixMode(GL_MODELVIEW)

    global gameOn, score, click

    if gameOn == False and click == 0:  # game will be over
        print('Game Over! Score:', score)
        click += 1

    global start, pause

    ## for the arrow
    glColor3f(0, 1.0, 1.0)
    drawLine(-250, 230, -230, 250)
    drawLine(-250, 230, -230, 210)
    drawLine(-250, 230, -200, 230)

    ## pause
    glColor3f(1.0, 0.749, 0)
    if pause == False:
        drawLine(-10, 250, -10, 210)
        drawLine(10, 250, 10, 210)

    ## no pause
    glColor3f(1.0, 0.749, 0.0)
    if pause == True:
        drawLine(-10, 250, -10, 210)
        drawLine(-10, 250, 10, 230)
        drawLine(-10, 210, 10, 230)

    ## cross mark
    glColor3f(1.0, 0.0, 0.0)
    drawLine(250, 250, 210, 210)
    drawLine(210, 250, 250, 210)

    # start = True

    ## diamond

    if gameOn == True:
        global diamond_x, diamond_y
        global r, g, b
        glColor3f(r, g, b)
        if start == True:
            x = diamond_x
            y = diamond_y

            drawLine(x, y, x - 20, y - 30)
            drawLine(x - 20, y - 30, x, y - 60)
            drawLine(x, y - 60, x + 20, y - 30)
            drawLine(x + 20, y - 30, x, y)

    ## Bowl

    global bowl_x, bowl_y
    if gameOn == True:
        glColor3f(1.0, 1.0, 1.0)
    else :
        glColor3f(1.0, 0.0, 0.0)
    x = bowl_x
    y = bowl_y
    drawLine(x, y, x + 80, y)
    drawLine(x + 80, y, x + 60, y - 30)
    drawLine(x + 60, y - 30, x + 20, y - 30)
    drawLine(x, y, x + 20, y - 30)

    ## game exit
    global exit_game
    if exit_game:
        print("Goodbye! Score:", score)
        glutLeaveMainLoop()

    glutSwapBuffers()





###########################################
def init():
    glClearColor(0, 0, 0, 0)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(-W_Width/2, W_Width/2, -W_Height/2, W_Height/2, -1, 1)




def check_collision(x1, y1, width1, height1, x2, y2, width2, height2):
    return (x1 < x2 + width2 and x1 + width1 > x2 and y1 < y2 + height2 and y1 + height1 > y2)


def diamond_animation():
    glutPostRedisplay()
    global diamond_x, diamond_y, d_speed, pause
    global bowl_x, bowl_y, score, gameOn

    if pause == False and gameOn == True:
        diamond_y = diamond_y - d_speed

    global r, g, b

    ## score
    x1 = bowl_x
    x2 = x1 + 80
    y1 = -220
    y2 = -230

    if check_collision(x1, y1, 80, 10, diamond_x - 20, diamond_y - 60, 40, 60):
        score += 1
        d_speed += 0.1  ## speed barbe, after every score
        print('Score:', score)
        diamond_y = 250
        r, g, b = random.uniform(0, 0.9), random.uniform(0, 0.9), random.uniform(0, 1)
        diamond_x = random.randint(-220, 220)

    if diamond_y - 60 < -245:
        gameOn = False




########################################################

def specialKeyListener(key, x, y):
    global bowl_x, bowl_y, b_speed, pause
    if pause == False and gameOn == True:
        x1 = bowl_x
        x2 = x1 + 80
        if key == GLUT_KEY_RIGHT and x2 < 250:
            bowl_x += b_speed
        if key == GLUT_KEY_LEFT and x1 > -250:
            bowl_x -= b_speed
    glutPostRedisplay()


##################################################

def mouseListener(button, state, x, y):
    global score, pause, gameOn, click
    global diamond_x, diamond_y, d_speed, exit_game

    if button == GLUT_LEFT_BUTTON:  ## right click korbo
        if (state == GLUT_DOWN):  ## button press ase

            ## starting over
            if 5 < x < 55:
                if 0 < y < 50:
                    print('Starting over!')
                    # click = 0
                    score = 0
                    diamond_y = 250
                    diamond_x = random.randint(-220, 220)
                    gameOn = True
                    d_speed = 0.4

            ## pausing
            if 230 < x < 270:
                if 0 < y < 50:
                    if pause == False:
                        pause = True
                    else:
                        pause = False

            ## closing the game
            if 450 < x < 500:
                if 0 < y < 50:
                    exit_game = True

    glutPostRedisplay()


###############################################################

glutInit()
glutInitWindowSize(W_Width, W_Height)
glutInitWindowPosition(0, 0)
glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB)

wind = glutCreateWindow(b"Catch the Diamonds")

init()

glutDisplayFunc(display)
glutIdleFunc(diamond_animation)

glutMouseFunc(mouseListener)
glutSpecialFunc(specialKeyListener)

glutMainLoop()